/************************************************************************
*
* Author: Andrew O'Grady
* Question 2 Homework 4
*
************************************************************************/

#include<bits/stdc++.h>

using namespace std;

//Functions
void printGivenLevel(struct node* root, int level);
int height(struct node* node);
struct node* newNode(int data);

//define node
struct node
{
    int data;
    struct node* left, *right;
};

//Print level order of nodes
void printLevelOrder(struct node* root)
{
    int h = height(root);
    int i;
    for (i=1; i<=h; i++)
        printGivenLevel(root, i);
}

//prints given level of node
void printGivenLevel(struct node* root, int level)
{
    if (root == NULL)
        return;
    if (level == 1)
        cout << root->data << " ";
    else if (level > 1)
{
        printGivenLevel(root->left, level-1);   //recursively call function to repeat
        printGivenLevel(root->right, level-1);
}
}

//Helper function used to compute height of the tree
int height(struct node* node)
{
    if (node==NULL)
        return 0;
    else
{

    int lheight = height(node->left);
    int rheight = height(node->right);
    if (lheight > rheight)
        return(lheight+1);
    else return(rheight+1);
}
}

//Allocates memory to create new node
struct node* newNode(int data)
{
    struct node* node = (struct node*)
    malloc(sizeof(struct node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;

    return(node);
}

/*Driver Function*/
int main()
{
    struct node *root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    cout<<"level order traversal \n";
    printLevelOrder(root);

return 0;
}
