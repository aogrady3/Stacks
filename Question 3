/************************************************************************
*
* Author: Andrew O'Grady
* Question 3 Homework 4
*
************************************************************************/

#include<bits/stdc++.h>
using namespace std;
#define bool int

// create a node
struct tNode
{
    int data;
    struct tNode* left;
    struct tNode* right;
};

//structure of the stack node
struct sNode
{
    struct tNode *t;
    struct sNode *next;
};

//stack Functions
void push(struct sNode** top_ref, struct tNode *t);
struct tNode *pop(struct sNode** top_ref);
bool isEmpty(struct sNode *top);

// inorder  traversal
    void inOrder(struct tNode *root)
{

    struct tNode *current = root;
    struct sNode *s = NULL;
    bool done = 0;

    while (!done)
{

        if(current != NULL)
{
        push(&s, current);
        current = current->left;
}
    else
{
        if (!isEmpty(s))
{
        current = pop(&s);
        cout << current->data << " ";
        current = current->right;
}
    else
        done = 1;
}
}
}

void push(struct sNode** top_ref, struct tNode *t)
{

    struct sNode* new_tNode =
    (struct sNode*) malloc(sizeof(struct sNode)); //allocation of node

if(new_tNode == NULL)
{
    printf("Stack Overflow \n");
        getchar();
        exit(0);
}
    new_tNode->t = t;
    new_tNode->next = (*top_ref);
    (*top_ref) = new_tNode;
}

//Check if empty
bool isEmpty(struct sNode *top)
{
    return (top == NULL)? 1 : 0;
}


struct tNode *pop(struct sNode** top_ref)
{
    struct tNode *res;
    struct sNode *top;

    if(isEmpty(*top_ref))
{
    printf("Stack Underflow \n");
    getchar();
    exit(0);
}
    else
{
        top = *top_ref;
        res = top->t;
        *top_ref = top->next;
        free(top);
        return res;
}
}

struct tNode* newtNode(int data)
{
    struct tNode* tNode = (struct tNode*)
    malloc(sizeof(struct tNode));
    tNode->data = data;
    tNode->left = NULL;
    tNode->right = NULL;

        return(tNode);
}

/*Driver Function */
int main()
{

    struct tNode *root = newtNode(1);
    root->left = newtNode(2);
    root->right = newtNode(3);
    root->left->left = newtNode(4);
    root->right->left = newtNode(5);
    root->right->right = newtNode(6);
    cout<<"Inorder"<<endl;
    inOrder(root);

    return 0;
}
